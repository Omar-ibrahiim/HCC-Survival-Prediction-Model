set.seed(123)
"endemic.countries","smoking","diabetes","obesity","hemochromatosis","X.arterial.hypertension",
"X.chronic.renal.insufficiency","human.immunodeficiency.virus","nonalcoholic.steatohepatitis.",
"X.esophageal.varices","splenomegaly","portal.hypertension","portal.vein.thrombosis",
"liver.metastasis","radiological.hallmark."
#lodeing the dataset
#redfine the symbole '?' to be NA in the dataset
data<-read.csv(choose.files(),header = TRUE ,na.string = "?" )
#convert numeric to factor
data$gender <- as.factor(data$gender)
data$symptoms <- as.factor(data$symptoms)
data$alcohol <- as.factor(data$alcohol)
data$hepatitis.b.surface.antigen <- as.factor(data$hepatitis.b.surface.antigen)
data$hepatitis.b.e.antigen <- as.factor(data$hepatitis.b.e.antigen)
data$hepatitis.b.core.antibody <- as.factor(data$hepatitis.b.core.antibody)
data$hepatitis.c.virus.antibody <- as.factor(data$hepatitis.c.virus.antibody)
data$cirrhosis <- as.factor(data$cirrhosis)
data$endemic.countries <- as.factor(data$endemic.countries)
data$smoking <- as.factor(data$smoking)
data$diabetes <- as.factor(data$diabetes)
data$obesity <- as.factor(data$obesity)
data$hemochromatosis <- as.factor(data$hemochromatosis)
data$X.arterial.hypertension <- as.factor(data$X.arterial.hypertension)
data$X.chronic.renal.insufficiency <- as.factor(data$X.chronic.renal.insufficiency)
data$human.immunodeficiency.virus <- as.factor(data$human.immunodeficiency.virus)
data$nonalcoholic.steatohepatitis. <- as.factor(data$nonalcoholic.steatohepatitis.)
data$X.esophageal.varices <- as.factor(data$X.esophageal.varices)
data$splenomegaly <- as.factor(data$splenomegaly)
data$portal.hypertension <- as.factor(data$portal.hypertension)
data$portal.vein.thrombosis <- as.factor(data$portal.vein.thrombosis)
data$liver.metastasis <- as.factor(data$liver.metastasis)
data$radiological.hallmark. <- as.factor(data$radiological.hallmark.)
data$performance.status <- as.factor(data$performance.status)
data$encephalopathy.degree <- as.factor(data$encephalopathy.degree)
data$ascites.degree <- as.factor(data$ascites.degree)
data$number.of.nodules <- as.factor(data$number.of.nodules)
# replace the missing values with the mean by imputing (for factor data)
impute <- mice (data[,1:50] , m = 3 , seed = 123 )
print(impute)
#impute$imp$symptoms
#newdata <- complete(impute , 1)
for(i in 1:ncol(data))
{
if (is.numeric(data[,i])) {
data[is.na(data[,i]), i] <- mean(data[,i], na.rm = TRUE)
}
if (is.factor(data[,i])){
impute$imp$data[,i]
}
}
data <- complete(impute , 1)
#Setting outcome variables as categorical
data$class.attribute <- factor(data$class.attribute, levels = c(0,1), labels = c("False", "True"))
# devideing the data into a trianing set and a testing set
#indxTrain <- createDataPartition(y = data$class.attribute,p = 0.75,list = FALSE)
#traindata <- data[indxTrain,]
#testdata <- data[-indxTrain,]
#shuffling data
n <- nrow(data)
shuffled <- data[sample(n),]
train <- shuffled[1:round(0.7 * n),]  #70% train
test <- shuffled[(round(0.7 * n) + 1):n,]   #30% test
# Initialize the accs vector
accs <- rep(0,10)
for (i in 1:10) {
# These indices indicate the interval of the test set.....10 folds
indices <- (((i-1) * round((1/10)*nrow(shuffled))) + 1):((i*round((1/10) * nrow(shuffled))))
}
# Exclude them from the train set
train <- shuffled[-indices,]
# Include them in the test set
test <- shuffled[indices,]
#Check dimensions of the split
prop.table(table(data$class.attribute)) * 100
prop.table(table(traindata$class.attribute)) * 100
prop.table(table(testdata$class.attribute)) * 100
#create objects x which holds the predictor variables and y which holds the response variables
x = train[,-50]
y = train$class.attribute
# the NB model
model = train(x,y,'nb' ,trControl=trainControl(method='cv',number=10))
model
#Model Evaluation
#Predict testing set
Predict <- predict(model,newdata = testdata )
#Get the confusion matrix to see accuracy value and other parameter values
confusionMatrix(Predict, testdata$class.attribute )
#Plot Variable performance
X <- varImp(model)
plot(X)
#loding the library
library(mice)
library(lattice)
library(caret)
library(psych)
library(Amelia)
library(GGally)
library(rpart)
library(VIM)
# package that holds the Naive Bayes function
library(e1071)
set.seed(123)
"endemic.countries","smoking","diabetes","obesity","hemochromatosis","X.arterial.hypertension",
"X.chronic.renal.insufficiency","human.immunodeficiency.virus","nonalcoholic.steatohepatitis.",
"X.esophageal.varices","splenomegaly","portal.hypertension","portal.vein.thrombosis",
"liver.metastasis","radiological.hallmark."
#lodeing the dataset
#redfine the symbole '?' to be NA in the dataset
data<-read.csv(choose.files(),header = TRUE ,na.string = "?" )
#convert numeric to factor
data$gender <- as.factor(data$gender)
data$symptoms <- as.factor(data$symptoms)
data$alcohol <- as.factor(data$alcohol)
data$hepatitis.b.surface.antigen <- as.factor(data$hepatitis.b.surface.antigen)
data$hepatitis.b.e.antigen <- as.factor(data$hepatitis.b.e.antigen)
data$hepatitis.b.core.antibody <- as.factor(data$hepatitis.b.core.antibody)
data$hepatitis.c.virus.antibody <- as.factor(data$hepatitis.c.virus.antibody)
data$cirrhosis <- as.factor(data$cirrhosis)
data$endemic.countries <- as.factor(data$endemic.countries)
data$smoking <- as.factor(data$smoking)
data$diabetes <- as.factor(data$diabetes)
data$obesity <- as.factor(data$obesity)
data$hemochromatosis <- as.factor(data$hemochromatosis)
data$X.arterial.hypertension <- as.factor(data$X.arterial.hypertension)
data$X.chronic.renal.insufficiency <- as.factor(data$X.chronic.renal.insufficiency)
data$human.immunodeficiency.virus <- as.factor(data$human.immunodeficiency.virus)
data$nonalcoholic.steatohepatitis. <- as.factor(data$nonalcoholic.steatohepatitis.)
data$X.esophageal.varices <- as.factor(data$X.esophageal.varices)
data$splenomegaly <- as.factor(data$splenomegaly)
data$portal.hypertension <- as.factor(data$portal.hypertension)
data$portal.vein.thrombosis <- as.factor(data$portal.vein.thrombosis)
data$liver.metastasis <- as.factor(data$liver.metastasis)
data$radiological.hallmark. <- as.factor(data$radiological.hallmark.)
data$performance.status <- as.factor(data$performance.status)
data$encephalopathy.degree <- as.factor(data$encephalopathy.degree)
data$ascites.degree <- as.factor(data$ascites.degree)
data$number.of.nodules <- as.factor(data$number.of.nodules)
# replace the missing values with the mean by imputing (for factor data)
impute <- mice (data[,1:50] , m = 3 , seed = 123 )
print(impute)
#impute$imp$symptoms
#newdata <- complete(impute , 1)
for(i in 1:ncol(data))
{
if (is.numeric(data[,i])) {
data[is.na(data[,i]), i] <- mean(data[,i], na.rm = TRUE)
}
if (is.factor(data[,i])){
impute$imp$data[,i]
}
}
data <- complete(impute , 1)
#Setting outcome variables as categorical
data$class.attribute <- factor(data$class.attribute, levels = c(0,1), labels = c("False", "True"))
# devideing the data into a trianing set and a testing set
#indxTrain <- createDataPartition(y = data$class.attribute,p = 0.75,list = FALSE)
#traindata <- data[indxTrain,]
#testdata <- data[-indxTrain,]
#shuffling data
n <- nrow(data)
shuffled <- data[sample(n),]
train <- shuffled[1:round(0.7 * n),]  #70% train
test <- shuffled[(round(0.7 * n) + 1):n,]   #30% test
# Initialize the accs vector
accs <- rep(0,10)
for (i in 1:10) {
# These indices indicate the interval of the test set.....10 folds
indices <- (((i-1) * round((1/10)*nrow(shuffled))) + 1):((i*round((1/10) * nrow(shuffled))))
}
# Exclude them from the train set
train <- shuffled[-indices,]
# Include them in the test set
test <- shuffled[indices,]
#Check dimensions of the split
prop.table(table(data$class.attribute)) * 100
prop.table(table(train$class.attribute)) * 100
prop.table(table(test$class.attribute)) * 100
#create objects x which holds the predictor variables and y which holds the response variables
x = train[,-50]
y = train$class.attribute
# the NB model
model = train(x,y,'nb' ,trControl=trainControl(method='cv',number=10))
model
#Model Evaluation
#Predict testing set
Predict <- predict(model,newdata = test )
#Get the confusion matrix to see accuracy value and other parameter values
confusionMatrix(Predict, test$class.attribute )
#Plot Variable performance
X <- varImp(model)
plot(X)
#loding the library
library(mice)
library(lattice)
library(caret)
library(psych)
library(Amelia)
library(GGally)
library(rpart)
library(VIM)
# package that holds the Naive Bayes function
library(e1071)
set.seed(123)
"endemic.countries","smoking","diabetes","obesity","hemochromatosis","X.arterial.hypertension",
"X.chronic.renal.insufficiency","human.immunodeficiency.virus","nonalcoholic.steatohepatitis.",
"X.esophageal.varices","splenomegaly","portal.hypertension","portal.vein.thrombosis",
"liver.metastasis","radiological.hallmark."
#lodeing the dataset
#redfine the symbole '?' to be NA in the dataset
data<-read.csv(choose.files(),header = TRUE ,na.string = "?" )
#convert numeric to factor
data$gender <- as.factor(data$gender)
data$symptoms <- as.factor(data$symptoms)
data$alcohol <- as.factor(data$alcohol)
data$hepatitis.b.surface.antigen <- as.factor(data$hepatitis.b.surface.antigen)
data$hepatitis.b.e.antigen <- as.factor(data$hepatitis.b.e.antigen)
data$hepatitis.b.core.antibody <- as.factor(data$hepatitis.b.core.antibody)
data$hepatitis.c.virus.antibody <- as.factor(data$hepatitis.c.virus.antibody)
data$cirrhosis <- as.factor(data$cirrhosis)
data$endemic.countries <- as.factor(data$endemic.countries)
data$smoking <- as.factor(data$smoking)
data$diabetes <- as.factor(data$diabetes)
data$obesity <- as.factor(data$obesity)
data$hemochromatosis <- as.factor(data$hemochromatosis)
data$X.arterial.hypertension <- as.factor(data$X.arterial.hypertension)
data$X.chronic.renal.insufficiency <- as.factor(data$X.chronic.renal.insufficiency)
data$human.immunodeficiency.virus <- as.factor(data$human.immunodeficiency.virus)
data$nonalcoholic.steatohepatitis. <- as.factor(data$nonalcoholic.steatohepatitis.)
data$X.esophageal.varices <- as.factor(data$X.esophageal.varices)
data$splenomegaly <- as.factor(data$splenomegaly)
data$portal.hypertension <- as.factor(data$portal.hypertension)
data$portal.vein.thrombosis <- as.factor(data$portal.vein.thrombosis)
data$liver.metastasis <- as.factor(data$liver.metastasis)
data$radiological.hallmark. <- as.factor(data$radiological.hallmark.)
data$performance.status <- as.factor(data$performance.status)
data$encephalopathy.degree <- as.factor(data$encephalopathy.degree)
data$ascites.degree <- as.factor(data$ascites.degree)
data$number.of.nodules <- as.factor(data$number.of.nodules)
# replace the missing values with the mean by imputing (for factor data)
impute <- mice (data[,1:50] , m = 3 , seed = 123 )
print(impute)
#impute$imp$symptoms
#newdata <- complete(impute , 1)
for(i in 1:ncol(data))
{
if (is.numeric(data[,i])) {
data[is.na(data[,i]), i] <- mean(data[,i], na.rm = TRUE)
}
if (is.factor(data[,i])){
impute$imp$data[,i]
}
}
data <- complete(impute , 1)
#Setting outcome variables as categorical
data$class.attribute <- factor(data$class.attribute, levels = c(0,1), labels = c("False", "True"))
# devideing the data into a trianing set and a testing set
#indxTrain <- createDataPartition(y = data$class.attribute,p = 0.75,list = FALSE)
#traindata <- data[indxTrain,]
#testdata <- data[-indxTrain,]
#shuffling data
n <- nrow(data)
shuffled <- data[sample(n),]
train <- shuffled[1:round(0.7 * n),]  #70% train
test <- shuffled[(round(0.7 * n) + 1):n,]   #30% test
# Initialize the accs vector
accs <- rep(0,10)
for (i in 1:10) {
# These indices indicate the interval of the test set.....10 folds
indices <- (((i-1) * round((1/10)*nrow(shuffled))) + 1):((i*round((1/10) * nrow(shuffled))))
}
# Exclude them from the train set
train <- shuffled[-indices,]
# Include them in the test set
test <- shuffled[indices,]
#Check dimensions of the split
prop.table(table(data$class.attribute)) * 100
prop.table(table(train$class.attribute)) * 100
prop.table(table(test$class.attribute)) * 100
#create objects x which holds the predictor variables and y which holds the response variables
x = train[,-50]
y = train$class.attribute
# the NB model
model = train(x,y,'nb' ,trControl=trainControl(method='cv',number=10))
model
#Model Evaluation
#Predict testing set
Predict <- predict(model,newdata = test )
#Get the confusion matrix to see accuracy value and other parameter values
confusionMatrix(Predict, test$class.attribute )
#Plot Variable performance
X <- varImp(model)
plot(X)
library(mice)
library(lattice)
#lodeing the dataset
data<-read.csv(choose.files(),header = FALSE ,na.strings = '?', stringsAsFactors = FALSE ,col.names = c("gender","symptoms","alcohol","hepatitis b surface antigen","hepatitis b e antigen","hepatitis b core antibody","hepatitis c virus antibody","cirrhosis","endemic countries","smoking","diabetes","obesity","hemochromatosis"," arterial hypertension"," chronic renal insufficiency","human immunodeficiency virus","nonalcoholic steatohepatitis "," esophageal varices","splenomegaly","portal hypertension","portal vein thrombosis","liver metastasis","radiological hallmark ","age","grams of alcohol per day","packs of cigarets per year","performance status","encephalopathy degree","ascites degree","international normalised ratio","alpha-fetoprotein","haemoglobin","mean corpuscular volume","leukocytes","platelets","albumin","total bilirubin","alanine transaminase","aspartate transaminase","gamma glutamyl transferase","alkaline phosphatase","total proteins","creatinine","number of nodules","major dimension of nodule cm","direct bilirubin mg/dL","iron","oxygen saturation %","ferritin","class attribute"))
#redfine the symbole '?' to be NA in the dataset
# replace the missing values with the mean
# (is.na) reeturn a logical value TRUE if the value is NA(messing) False if the value is not missing
# which tells us the location of the missing values
# mean compute the mean of a set
# we will use (as.numeric(as.charcter())) to convert the factor to numreric so we can calculate the mean
# we will combine the above fn to replace the NA with the mean
data$symptoms[which(is.na(data$symptoms))] <- mean(as.numeric(as.character(data$symptoms)) ,na.rm = TRUE)
data$alcohol[which(is.na(data$alcohol))] <- mean(as.numeric(as.character( data$alcohol)), na.rm = TRUE)
data$hepatitis.b.surface.antigen[which(is.na(data$hepatitis.b.surface.antigen))] <- mean(as.numeric(as.character(data$hepatitis.b.surface.antigen)), na.rm = TRUE)
data$hepatitis.b.e.antigen[which(is.na(data$hepatitis.b.e.antigen))] <- mean(as.numeric(as.character(data$hepatitis.b.e.antigen)), na.rm = TRUE)
data$hepatitis.b.core.antibody[which(is.na(data$hepatitis.b.core.antibody))] <- mean(as.numeric(as.character(data$hepatitis.b.core.antibody)) ,na.rm = TRUE)
data$hepatitis.c.virus.antibody[which(is.na(data$hepatitis.c.virus.antibody))] <- mean(as.numeric(as.character(data$hepatitis.c.virus.antibody)),na.rm = TRUE)
data$cirrhosis[which(is.na(data$cirrhosis))] <- mean(as.numeric(as.character(data$cirrhosis)),na.rm = TRUE)
data$endemic.countries[which(is.na(data$endemic.countries))] <-mean(as.numeric(as.character(data$endemic.countries)),na.rm = TRUE)
data$smoking[which(is.na(data$smoking))] <- mean(as.numeric(as.character(data$smoking)),na.rm = TRUE)
data$diabetes[which(is.na(data$diabetes))] <-mean(as.numeric(as.character(data$diabetes)),na.rm = TRUE)
data$obesity[which(is.na(data$obesity))] <-mean(as.numeric(as.character(data$obesity)),na.rm = TRUE)
data$hemochromatosis[which(is.na(data$hemochromatosis))] <-mean(as.numeric(as.character(data$hemochromatosis)),na.rm = TRUE)
data$X.arterial.hypertension[which(is.na(data$X.arterial.hypertension))] <-mean(as.numeric(as.character(data$X.arterial.hypertension)),na.rm = TRUE)
data$X.chronic.renal.insufficiency[which(is.na(data$X.chronic.renal.insufficiency))] <-mean(as.numeric(as.character(data$X.chronic.renal.insufficiency)),na.rm = TRUE)
data$human.immunodeficiency.virus[which(is.na(data$human.immunodeficiency.virus))] <-mean(as.numeric(as.character(data$human.immunodeficiency.virus)),na.rm = TRUE)
data$nonalcoholic.steatohepatitis.[which(is.na(data$nonalcoholic.steatohepatitis.))] <-mean(as.numeric(as.character(data$nonalcoholic.steatohepatitis.)),na.rm = TRUE)
data$X.esophageal.varices[which(is.na(data$X.esophageal.varices))] <-mean(as.numeric(as.character(data$X.esophageal.varices)),na.rm = TRUE)
data$splenomegaly[which(is.na(data$splenomegaly))] <-mean(as.numeric(as.character(data$splenomegaly)),na.rm = TRUE)
data$portal.hypertension[which(is.na(data$portal.hypertension))] <-mean(as.numeric(as.character(data$portal.hypertension)),na.rm = TRUE)
data$portal.vein.thrombosis[which(is.na(data$portal.vein.thrombosis))] <-mean(as.numeric(as.character(data$portal.vein.thrombosis)),na.rm = TRUE)
data$diabetes[which(is.na(data$diabetesliver.metastasis))] <-mean(as.numeric(as.character(data$liver.metastasis)),na.rm = TRUE)
data$radiological.hallmark.[which(is.na(data$radiological.hallmark.))] <-mean(as.numeric(as.character(data$radiological.hallmark.)),na.rm = TRUE)
data$age[which(is.na(data$age))] <-mean(as.numeric(as.character(data$age)),na.rm = TRUE)
data$grams.of.alcohol.per.day[which(is.na(data$grams.of.alcohol.per.day))] <-mean(as.numeric(as.character(data$grams.of.alcohol.per.day)),na.rm = TRUE)
data$packs.of.cigarets.per.year[which(is.na(data$packs.of.cigarets.per.year))] <-mean(as.numeric(as.character(data$packs.of.cigarets.per.year)),na.rm = TRUE)
data$performance.status[which(is.na(data$performance.status))] <-mean(as.numeric(as.character(data$performance.status)),na.rm = TRUE)
data$encephalopathy.degree[which(is.na(data$encephalopathy.degree))] <-mean(as.numeric(as.character(data$encephalopathy.degree)),na.rm = TRUE)
data$ascites.degree[which(is.na(data$ascites.degree))] <-mean(as.numeric(as.character(data$ascites.degree)),na.rm = TRUE)
data$international.normalised.ratio[which(is.na(data$international.normalised.ratio))] <-mean(as.numeric(as.character(data$international.normalised.ratio)),na.rm = TRUE)
data$alpha.fetoprotein[which(is.na(data$alpha.fetoprotein))] <-mean(as.numeric(as.character(data$alpha.fetoprotein)),na.rm = TRUE)
data$haemoglobin[which(is.na(data$haemoglobin))] <-mean(as.numeric(as.character(data$haemoglobin)),na.rm = TRUE)
data$mean.corpuscular.volume[which(is.na(data$mean.corpuscular.volume))] <-mean(as.numeric(as.character(data$mean.corpuscular.volume)),na.rm = TRUE)
data$leukocytes[which(is.na(data$leukocytes))] <-mean(as.numeric(as.character(data$leukocytes)),na.rm = TRUE)
data$platelets[which(is.na(data$platelets))] <-mean(as.numeric(as.character(data$platelets)),na.rm = TRUE)
data$albumin[which(is.na(data$albumin))] <-mean(as.numeric(as.character(data$albumin)),na.rm = TRUE)
data$total.bilirubin[which(is.na(data$total.bilirubin))] <-mean(as.numeric(as.character(data$total.bilirubin)),na.rm = TRUE)
data$alanine.transaminase[which(is.na(data$alanine.transaminase))] <-mean(as.numeric(as.character(data$alanine.transaminase)),na.rm = TRUE)
data$aspartate.transaminase[which(is.na(data$aspartate.transaminase))] <-mean(as.numeric(as.character(data$aspartate.transaminase)),na.rm = TRUE)
data$gamma.glutamyl.transferase[which(is.na(data$gamma.glutamyl.transferase))] <-mean(as.numeric(as.character(data$gamma.glutamyl.transferase)),na.rm = TRUE)
data$alkaline.phosphatase[which(is.na(data$alkaline.phosphatase))] <-mean(as.numeric(as.character(data$alkaline.phosphatase)),na.rm = TRUE)
data$total.proteins[which(is.na(data$total.proteins))] <-mean(as.numeric(as.character(data$total.proteins)),na.rm = TRUE)
data$creatinine[which(is.na(data$creatinine))] <-mean(as.numeric(as.character(data$creatinine)),na.rm = TRUE)
data$number.of.nodules[which(is.na(data$number.of.nodules))] <-mean(as.numeric(as.character(data$number.of.nodules)),na.rm = TRUE)
data$major.dimension.of.nodule.cm[which(is.na(data$major.dimension.of.nodule.cm))] <-mean(as.numeric(as.character(data$major.dimension.of.nodule.cm)),na.rm = TRUE)
data$direct.bilirubin.mg.dL[which(is.na(data$direct.bilirubin.mg.dL))] <-mean(as.numeric(as.character(data$direct.bilirubin.mg.dL)),na.rm = TRUE)
data$iron[which(is.na(data$iron))] <-mean(as.numeric(as.character(data$iron)),na.rm = TRUE)
data$oxygen.saturation..[which(is.na(data$oxygen.saturation..))] <-mean(as.numeric(as.character(data$oxygen.saturation..)),na.rm = TRUE)
data$ferritin[which(is.na(data$ferritin))] <-mean(as.numeric(as.character(data$ferritin)),na.rm = TRUE)
data$class.attribute[which(is.na(data$class.attribute))] <-mean(as.numeric(as.character(data$class.attribute)),na.rm = TRUE)
data <- data[order(data$PTS),]
row.names(data) <- data$Name
data <- data[,2:20]
data_matrix <- data.matrix(data)
data_heatmap <- heatmap(data_matrix, Rowv=NA, Colv=NA, col = cm.colors(256), scale="column", margins=c(5,10))
data_heatmap <- heatmap(data_matrix, Rowv=NA, Colv=NA, col = heat.colors(256), scale="column", margins=c(5,10))
library(mice)
library(lattice)
#lodeing the dataset
data<-read.csv(choose.files(),header = TRUE ,na.string = "?" )
#convert numeric to factor
data$gender <- as.factor(data$gender)
data$symptoms <- as.factor(data$symptoms)
data$alcohol <- as.factor(data$alcohol)
data$hepatitis.b.surface.antigen <- as.factor(data$hepatitis.b.surface.antigen)
data$hepatitis.b.e.antigen <- as.factor(data$hepatitis.b.e.antigen)
data$hepatitis.b.core.antibody <- as.factor(data$hepatitis.b.core.antibody)
data$hepatitis.c.virus.antibody <- as.factor(data$hepatitis.c.virus.antibody)
data$cirrhosis <- as.factor(data$cirrhosis)
data$endemic.countries <- as.factor(data$endemic.countries)
data$smoking <- as.factor(data$smoking)
data$diabetes <- as.factor(data$diabetes)
data$obesity <- as.factor(data$obesity)
data$hemochromatosis <- as.factor(data$hemochromatosis)
data$X.arterial.hypertension <- as.factor(data$X.arterial.hypertension)
data$X.chronic.renal.insufficiency <- as.factor(data$X.chronic.renal.insufficiency)
data$human.immunodeficiency.virus <- as.factor(data$human.immunodeficiency.virus)
data$nonalcoholic.steatohepatitis. <- as.factor(data$nonalcoholic.steatohepatitis.)
data$X.esophageal.varices <- as.factor(data$X.esophageal.varices)
data$splenomegaly <- as.factor(data$splenomegaly)
data$portal.hypertension <- as.factor(data$portal.hypertension)
data$portal.vein.thrombosis <- as.factor(data$portal.vein.thrombosis)
data$liver.metastasis <- as.factor(data$liver.metastasis)
data$radiological.hallmark. <- as.factor(data$radiological.hallmark.)
data$performance.status <- as.factor(data$performance.status)
data$encephalopathy.degree <- as.factor(data$encephalopathy.degree)
data$ascites.degree <- as.factor(data$ascites.degree)
data$number.of.nodules <- as.factor(data$number.of.nodules)
# replace the missing values with the mean by imputing (for factor data)
impute <- mice (data[,1:50] , m = 3 , seed = 123 )
print(impute)
#impute$imp$symptoms
#newdata <- complete(impute , 1)
for(i in 1:ncol(data))
{
if (is.numeric(data[,i])) {
data[is.na(data[,i]), i] <- mean(data[,i], na.rm = TRUE)
}
if (is.factor(data[,i])){
impute$imp$data[,i]
}
}
data <- complete(impute , 1)
data <- data[order(data$PTS),]
row.names(data) <- data$Name
data <- data[,2:20]
data_matrix <- data.matrix(data)
data_heatmap <- heatmap(data_matrix, Rowv=NA, Colv=NA, col = cm.colors(256), scale="column", margins=c(5,10))
data_heatmap <- heatmap(data_matrix, Rowv=NA, Colv=NA, col = heat.colors(256), scale="column", margins=c(5,10))
#loding the library
library(mice)
library(lattice)
library(caret)
library(psych)
library(Amelia)
library(GGally)
library(rpart)
library(VIM)
# package that holds the Naive Bayes function
library(e1071)
set.seed(123)
"endemic.countries","smoking","diabetes","obesity","hemochromatosis","X.arterial.hypertension",
"X.chronic.renal.insufficiency","human.immunodeficiency.virus","nonalcoholic.steatohepatitis.",
"X.esophageal.varices","splenomegaly","portal.hypertension","portal.vein.thrombosis",
"liver.metastasis","radiological.hallmark."
#lodeing the dataset
#redfine the symbole '?' to be NA in the dataset
data<-read.csv(choose.files(),header = TRUE ,na.string = "?" )
#convert numeric to factor
data$gender <- as.factor(data$gender)
data$symptoms <- as.factor(data$symptoms)
data$alcohol <- as.factor(data$alcohol)
data$hepatitis.b.surface.antigen <- as.factor(data$hepatitis.b.surface.antigen)
data$hepatitis.b.e.antigen <- as.factor(data$hepatitis.b.e.antigen)
data$hepatitis.b.core.antibody <- as.factor(data$hepatitis.b.core.antibody)
data$hepatitis.c.virus.antibody <- as.factor(data$hepatitis.c.virus.antibody)
data$cirrhosis <- as.factor(data$cirrhosis)
data$endemic.countries <- as.factor(data$endemic.countries)
data$smoking <- as.factor(data$smoking)
data$diabetes <- as.factor(data$diabetes)
data$obesity <- as.factor(data$obesity)
data$hemochromatosis <- as.factor(data$hemochromatosis)
data$X.arterial.hypertension <- as.factor(data$X.arterial.hypertension)
data$X.chronic.renal.insufficiency <- as.factor(data$X.chronic.renal.insufficiency)
data$human.immunodeficiency.virus <- as.factor(data$human.immunodeficiency.virus)
data$nonalcoholic.steatohepatitis. <- as.factor(data$nonalcoholic.steatohepatitis.)
data$X.esophageal.varices <- as.factor(data$X.esophageal.varices)
data$splenomegaly <- as.factor(data$splenomegaly)
data$portal.hypertension <- as.factor(data$portal.hypertension)
data$portal.vein.thrombosis <- as.factor(data$portal.vein.thrombosis)
data$liver.metastasis <- as.factor(data$liver.metastasis)
data$radiological.hallmark. <- as.factor(data$radiological.hallmark.)
data$performance.status <- as.factor(data$performance.status)
data$encephalopathy.degree <- as.factor(data$encephalopathy.degree)
data$ascites.degree <- as.factor(data$ascites.degree)
data$number.of.nodules <- as.factor(data$number.of.nodules)
# replace the missing values with the mean by imputing (for factor data)
impute <- mice (data[,1:50] , m = 3 , seed = 123 )
print(impute)
#impute$imp$symptoms
#newdata <- complete(impute , 1)
for(i in 1:ncol(data))
{
if (is.numeric(data[,i])) {
data[is.na(data[,i]), i] <- mean(data[,i], na.rm = TRUE)
}
if (is.factor(data[,i])){
impute$imp$data[,i]
}
}
data <- complete(impute , 1)
#Setting outcome variables as categorical
data$class.attribute <- factor(data$class.attribute, levels = c(0,1), labels = c("False", "True"))
# devideing the data into a trianing set and a testing set
#indxTrain <- createDataPartition(y = data$class.attribute,p = 0.75,list = FALSE)
#traindata <- data[indxTrain,]
#testdata <- data[-indxTrain,]
#shuffling data
n <- nrow(data)
shuffled <- data[sample(n),]
train <- shuffled[1:round(0.7 * n),]  #70% train
test <- shuffled[(round(0.7 * n) + 1):n,]   #30% test
# Initialize the accs vector
accs <- rep(0,10)
for (i in 1:10) {
# These indices indicate the interval of the test set.....10 folds
indices <- (((i-1) * round((1/10)*nrow(shuffled))) + 1):((i*round((1/10) * nrow(shuffled))))
}
# Exclude them from the train set
train <- shuffled[-indices,]
# Include them in the test set
test <- shuffled[indices,]
#Check dimensions of the split
prop.table(table(data$class.attribute)) * 100
prop.table(table(train$class.attribute)) * 100
prop.table(table(test$class.attribute)) * 100
#create objects x which holds the predictor variables and y which holds the response variables
x = train[,-50]
y = train$class.attribute
# the NB model
model = train(x,y,'nb' ,trControl=trainControl(method='cv',number=10))
model
#Model Evaluation
#Predict testing set
Predict <- predict(model,newdata = test )
#Get the confusion matrix to see accuracy value and other parameter values
confusionMatrix(Predict, test$class.attribute )
#Plot Variable performance
X <- varImp(model)
plot(X)
